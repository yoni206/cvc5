(set-logic QF_UFNIA)
(declare-fun pow2 (Int) Int)
(define-fun bitof ((t Int) (false Int) (a Int)) Int 0)
(define-fun intmax ((k Int)) Int (- (pow2 k) 1))
(define-fun in_range ((k Int) (x Int)) Bool (and (>= x 0) (<= x (intmax k))))
(define-fun intmodtotal ((t Int) (a Int) (b Int)) Int (ite (= b 0) a (mod a b)))
(define-fun intmins ((k Int)) Int (pow2 (- k 1)))
(define-fun intshl ((k Int) (a Int) (b Int)) Int (intmodtotal 0 (* a (pow2 b)) (pow2 k)))
(define-fun pow2_base_cases () Bool (and (= 1 (pow2 0)) (= 2 (pow2 1)) (= 4 (pow2 2)) (= 8 (pow2 3))))
(define-fun pow2_ax () Bool pow2_base_cases)
(define-fun l ((k Int) (x Int) (s Int) (t Int)) Bool (< (intshl k s x) t))
(declare-fun k () Int)
(declare-fun s () Int)
(declare-fun t () Int)
(define-fun inv ((pow2 Int) (t Int) (t Int)) Int (intmins pow2))
(define-fun l_part ((pow2 Int) (t Int) (t Int)) Bool (l pow2 (inv pow2 0 0) s t))
(define-fun left_to_right ((s Int) (t Int) (t Int)) Bool (or false (l_part s 0 t)))
(declare-fun madebysaiyan_0 (Int Int) Int)
(define-fun assertion_ltr () Bool (not (left_to_right k 0 t)))
(assert (>= k 1))
(assert (in_range k s))
(assert (distinct t 0))
(assert (>= (ite (= 0 (pow2 (* t (madebysaiyan_0 0 s)))) (* s (pow2 (pow2 (- k 1)))) (mod (* s (pow2 (pow2 (- k 1)))) (pow2 k))) t))
(assert pow2_ax)
(assert assertion_ltr)
(check-sat)
